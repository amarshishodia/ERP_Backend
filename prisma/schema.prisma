generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  password       String
  role           String
  email          String?       @unique
  salary         Int?
  designation_id Int?
  join_date      DateTime?
  leave_date     DateTime?
  id_no          String?       @unique
  department     String?
  phone          String?       @unique
  address        String?
  blood_group    String?
  image          String?
  status         Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  saleInvoice    saleInvoice[]
  designation    designation?  @relation(fields: [designation_id], references: [id])

  @@index([designation_id], map: "user_designation_id_fkey")
}

model designation {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user[]
}

model product {
  id                           Int                            @id @default(autoincrement())
  name                         String?
  isbn                         String                         @unique
  author                       String?
  quantity                     Int
  purchase_price               Float?
  sale_price                   Float
  imageName                    String?
  product_category_id          Int?
  product_currency_id          Int?
  book_publisher_id            Int?
  unit_measurement             Float?
  unit_type                    String?
  reorder_quantity             Int?
  status                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  sku                          String?                        @db.Text
  book_publisher               book_publisher?                @relation(fields: [book_publisher_id], references: [id])
  product_category             product_category?              @relation(fields: [product_category_id], references: [id])
  product_currency             product_currency?              @relation(fields: [product_currency_id], references: [id])
  purchaseInvoiceProduct       purchaseInvoiceProduct[]
  returnPurchaseInvoiceProduct returnPurchaseInvoiceProduct[]
  returnSaleInvoiceProduct     returnSaleInvoiceProduct[]
  saleInvoiceProduct           saleInvoiceProduct[]

  @@index([book_publisher_id], map: "product_book_publisher_id_fkey")
  @@index([product_category_id], map: "product_product_category_id_fkey")
  @@index([product_currency_id], map: "product_product_currency_id_fkey")
  @@index([name], map: "product_name_idx")
  @@index([author], map: "product_author_idx")
  @@index([isbn], map: "product_isbn_idx")
  @@index([sku(length: 100)], map: "product_sku_idx")
  @@index([status], map: "product_status_idx")
}

model product_category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
}

model book_publisher {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]

  @@index([name], map: "book_publisher_name_idx")
}

model product_currency {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  symbol     String    @unique
  conversion Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  product    product[]
}

model supplier {
  id              Int               @id @default(autoincrement())
  name            String
  phone           String            @unique
  address         String
  status          Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  purchaseInvoice purchaseInvoice[]
}

model purchaseInvoice {
  id                     Int                      @id @default(autoincrement())
  date                   DateTime
  total_amount           Float
  discount               Float
  paid_amount            Float
  due_amount             Float
  supplier_id            Int
  note                   String?
  supplier_memo_no       String?
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  supplier               supplier                 @relation(fields: [supplier_id], references: [id], onDelete: Cascade)
  returnPurchaseInvoice  returnPurchaseInvoice[]
  purchaseInvoiceProduct purchaseInvoiceProduct[]

  @@index([supplier_id], map: "purchaseInvoice_supplier_id_fkey")
}

model purchaseInvoiceProduct {
  id                        Int             @id @default(autoincrement())
  product_id                Int
  invoice_id                Int
  product_quantity          Int
  product_purchase_price    Float
  product_purchase_discount Float?
  created_at                DateTime        @default(now())
  updated_at                DateTime        @updatedAt
  product                   product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  purchaseInvoice           purchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id], map: "purchaseInvoiceProduct_invoice_id_fkey")
  @@index([product_id], map: "purchaseInvoiceProduct_product_id_fkey")
}

model customer {
  id          Int           @id @default(autoincrement())
  name        String
  phone       String        @unique
  address     String
  status      Boolean       @default(true)
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  saleInvoice saleInvoice[]
}

model saleInvoice {
  id                     Int                  @id @default(autoincrement())
  date                   DateTime
  invoice_number         Int
  total_amount           Float
  discount               Float
  paid_amount            Float
  due_amount             Float
  total_product_discount Float?
  total_product_qty      Int?
  profit                 Float
  customer_id            Int
  user_id                Int
  note                   String?
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt
  invoice_order_date     DateTime?
  invoice_order_number   String?
  prefix                 String?
  customer               customer             @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user                   user                 @relation(fields: [user_id], references: [id], onDelete: NoAction)
  saleInvoiceProduct     saleInvoiceProduct[]
  returnSaleInvoice      returnSaleInvoice[]

  @@index([customer_id], map: "saleInvoice_customer_id_fkey")
  @@index([user_id], map: "saleInvoice_user_id_fkey")
}

model saleInvoiceProduct {
  id                      Int         @id @default(autoincrement())
  product_id              Int
  invoice_id              Int
  product_quantity        Int
  product_sale_price      Float
  product_sale_discount   Float?
  product_sale_currency   String?
  product_sale_conversion Float?
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  product                 product     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  saleInvoice             saleInvoice @relation(fields: [invoice_id], references: [id])

  @@index([invoice_id], map: "saleInvoiceProduct_invoice_id_fkey")
  @@index([product_id], map: "saleInvoiceProduct_product_id_fkey")
}

model transaction {
  id          Int      @id @default(autoincrement())
  date        DateTime
  debit_id    Int
  credit_id   Int
  particulars String
  amount      Float
  type        String?
  related_id  Int?
  status      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  debit       account  @relation("TransactionDebit", fields: [debit_id], references: [id])
  credit      account  @relation("TransactionCredit", fields: [credit_id], references: [id])

  @@index([credit_id], map: "transaction_credit_id_fkey")
  @@index([debit_id], map: "transaction_debit_id_fkey")
}

model role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  status         Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
}

model permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  rolePermission rolePermission[]
}

model rolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  permission_id Int
  status        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@index([permission_id], map: "rolePermission_permission_id_fkey")
}

model account {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  type               String
  subAccount         subAccount[]
  debitTransactions  transaction[] @relation("TransactionDebit")
  creditTransactions transaction[] @relation("TransactionCredit")
}

model subAccount {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  account_id Int
  status     Boolean @default(true)
  account    account @relation(fields: [account_id], references: [id], onDelete: NoAction)

  @@index([account_id], map: "subAccount_account_id_fkey")
}

model returnPurchaseInvoice {
  id                           Int                            @id @default(autoincrement())
  date                         DateTime
  total_amount                 Float
  note                         String?
  purchaseInvoice_id           Int
  status                       Boolean                        @default(true)
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  purchaseInvoice              purchaseInvoice                @relation(fields: [purchaseInvoice_id], references: [id], onDelete: Cascade)
  returnPurchaseInvoiceProduct returnPurchaseInvoiceProduct[]

  @@index([purchaseInvoice_id], map: "returnPurchaseInvoice_purchaseInvoice_id_fkey")
}

model returnPurchaseInvoiceProduct {
  id                     Int                   @id @default(autoincrement())
  product_id             Int
  invoice_id             Int
  product_quantity       Int
  product_purchase_price Float
  product_discount       Float?
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  product                product               @relation(fields: [product_id], references: [id], onDelete: Cascade)
  returnPurchaseInvoice  returnPurchaseInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id], map: "returnPurchaseInvoiceProduct_invoice_id_fkey")
  @@index([product_id], map: "returnPurchaseInvoiceProduct_product_id_fkey")
}

model returnSaleInvoice {
  id                       Int                        @id @default(autoincrement())
  date                     DateTime
  total_amount             Float
  note                     String?
  saleInvoice_id           Int
  status                   Boolean                    @default(true)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  saleInvoice              saleInvoice                @relation(fields: [saleInvoice_id], references: [id], onDelete: Cascade)
  returnSaleInvoiceProduct returnSaleInvoiceProduct[]

  @@index([saleInvoice_id], map: "returnSaleInvoice_saleInvoice_id_fkey")
}

model returnSaleInvoiceProduct {
  id                 Int               @id @default(autoincrement())
  product_id         Int
  invoice_id         Int
  product_quantity   Int
  product_sale_price Float
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  product            product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  returnSaleInvoice  returnSaleInvoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  @@index([invoice_id], map: "returnSaleInvoiceProduct_invoice_id_fkey")
  @@index([product_id], map: "returnSaleInvoiceProduct_product_id_fkey")
}

model appSetting {
  id             Int     @id @default(autoincrement())
  company_name   String
  tag_line       String?
  address        String
  phone          String
  email          String?
  website        String?
  bank_name      String?
  account_name   String?
  account_number String?
  ifsc           String?
  terms          String? @db.LongText
  logo           String?
}

model firm {
  id      Int      @id @default(autoincrement())
  name    String
  address String
  phone   String
  email   String
  website String
  prefix  prefix[]
}

model module {
  id     Int      @id @default(autoincrement())
  name   String
  prefix prefix[]
}

model prefix {
  id        Int    @id @default(autoincrement())
  firm_id   Int
  module_id Int
  value     String
  firm      firm   @relation(fields: [firm_id], references: [id], onDelete: Cascade)
  module    module @relation(fields: [module_id], references: [id], onDelete: Cascade)

  @@index([firm_id], map: "prefix_firm_id_fkey")
  @@index([module_id], map: "prefix_module_id_fkey")
}
